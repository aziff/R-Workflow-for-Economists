uniform
?runif
uniform <- runif(1000)
uniform <- runif(1000, min = 0, max = 1)
uniform
hist(uniform)
x <- runif(10, min = 0, max = 1)
y <- runif(10, min = 0, max = 1)
x
z <- x[1:3]
z
y
length(y)
length(z)
y + z
y > 0.75
y[y > 0.75]
?matrix
N <- matrix(1:12, nrow = 4, ncol = 3)
N
matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
str(N)
attributes(N)
dim(N)
dim(N)[1]
P <- matrix(letters, nrow = 2)
P
Q <- matrix(runif(9), nrow = 3)
Q
R <- matrix(c(TRUE, TRUE, FALSE, TRUE), nrow = 2)
R
S <- matrix(NA, nrow = 3, ncol = 4)
S
S <- matrix(1, nrow = 3, ncol = 4)
S
matrix(1:10, nrow = 2, ncol = 10, byrow = TRUE)
matrix(1:10, nrow = 2, ncol = 6, byrow = TRUE)
a <- matrix(1:10, nrow = 2, ncol = 6, byrow = TRUE)
a
a <- c(2, 4, 6)
a <- c(2, 4, 6)
b <- c(1, 3, 5)
c <- c(0, 0, 1)
cbind(a, b)
rbind(a, b)
A <- cbind(a, b, c)
A
dim(A)
A
P <- matrix(1:12, nrow = r)
P <- matrix(1:12, nrow = 4)
P
P[2, 2]
P[2, 3]
P[1:2, c(1, 3)]
P[1:2, c(1, 5)]
P[1:2, c(1, 3)]
P[ , c(1, 3)]
P[1:2, ]
P[, 2]
P
P[, 2]
5:8
P[, 2, drop = FALSE]
array(1:12, dim = c(2, 2, 3))
r <- list(1, "hi", FALSE, 2.3, 19:23, matrix(1:4, nrow = 2))
r
r[[3]]
r[[3]]
length(r)
str(r)
s <- list(myinteger = 1,
mycharacter = "hi",
mylogical = FALSE,
mydouble = 2.3,
myvector = 19:23,
mymatrix = matrix(1:4, nrow = 2))
s
s[[1]]
s$myinteger
s$mymatrix
t <- list(1:10, c("USA", "Mexico", "Canada"))
t
names(t)
names(t) <- c("number", "countries")
t
t$number
l1 <- list("R", 1:9, c(TRUE, FALSE), 1.5)
str(l1)
l2 <- list(l1, letters[1:5])
l2
l1
l1$greeting <- "Hello world"
l1
t
t
t[[1]]
t[1]
x <- 1:10
t$variable <- x
t
t[["varible"]]
t[["variable"]]
t["variable"]
str(t["variable"])
str(t[["variable"]])
t
t
t[[1]]
t[[1]][8]
t[1]
t[1][8]
t$countries[3]
t$countries[2:3]
me <- list(name = "Anna", age = 28L, driving = c(FALSE, TRUE, FALSE, TRUE))
me
me[[3]][2]
me$driving[2]
cl <- makeCluster(2, outfile = "")
u <- factor(c("Macro", "Metrics", "Micro", "Micro", "Macro"))
u
v <- c("Macro", "Metrics", "Micro", "Micro", "Macro")
v
class(u)
typeof(u)
u == "Macro"
levels(u)
summary(u)
z <- runif(10)
z
summary(z)
a <- c("Clemson", "USC", "USC", "Clemson", "Clemson", "USC")
a
b <- as.factor(a)
b
c <- c(1:4, 4:1)
c
as.factor(c)
t <- data.frame(Salary = c(623, 515, 611, 729, 843),
Dpt = c("IT", "Operations", "IT", "HR", "Finance"))
t
View(t)
View(t)
View(u)
dim(t)
class(t)
str(t)
abc <- data.frame(var1 = a,
var2 = b,
var3 = c)
a <- 1:3
b <- letters[1:3]
c <- LETTERS[1:3]
abc <- data.frame(var1 = a,
var2 = b,
var3 = c)
View(abc)
t
?cbind
t <- cbind(t, new)
t
new <- c(1, 1, 1, 0, 0)
t <- cbind(t, new)
View(t)
t
t <- rbind(t, c(313, "Marketing", 1))
t
newdf <- data.frame(Salary = 701, Dpt = "Finance", new = 0)
newdf
t <- rbind(t, newdf)
t
t[1:2, ]
t[c("2", "3"), ]
t[c("Salary", "new")]
t[c("Salary", "new")]
t[1:2, c("Salary", "new")]
t[ , c("Salary", "new")]
t[1:3]
t[, 2]
t[, 2, drop = FALSE]
t[, 2:3]
scores <- list(scrabble = c(1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3,
1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10),
sequential = 1:26,
name = letters)
scores
scores[1]
scores[[1]]
scores$scrabble
scores_df <- as.data.frame(scores)
View(scores_df)
View(scores)
scores_df$scrabble
scores_df$scrabble > 3
scores_df[scores_df$scrabble > 3, ]
scores_df[scores_df$scrabble > 3, "name"]
scores_df[scores_df$scrabble > 3, 3]
scores_df[scores_df$scrabble > 3, "name", drop = FALSE]
cbind(scores_df, 26:1)
tmp <- cbind(scores_df, 26:1)
names(tmp)
names(tmp)[4]
names(tmp)[4] <- "reverse"
tmp
scores_df
scores_df$reverse <- 26:1
scores_df
?subset
rm(list = ls())
a <- 3
b <- 8
c <- c(1, 9, 3)
d <- c(7, 10, 3)
a > b
a <= b
c < d
c == d
c != d
(a > b) & (b != 7)
(a > b) | (b != 7)
c < d
any(c < d)
all(c < d)
identical(c, d)
x <- runif(10)
x >= 0.9
x
y <- any(x >= 0.9)
y
f <- runif(1)
f
if (f < 0.5) {
print("The random number is less than one half")
}
if (f < 0.5) {
print("The random number is less than one half")
} else {
print("The random number is greater than or equal to one half")
}
if (f < 0.25) {
print("The random number is less than one quarter")
} else if (f >= 0.25 & f < 0.5) {
print("The random number is between one quarter and one half.")
} else if (f >= 0.5 & f < 0.75) {
print("The random number is between one half and three quarters.")
} else {
print("The random number is between three quarters and one.")
}
if (f < 0.5) {
if (f < 0.25) {
print("The random number is less than one quarter.")
} else {
print("The random number is between one quarter and one half.")
}
} else {
if (f < 0.75) {
print("The random number is between one half and three quarters.")
} else {
print("The random number is between three quarters and one.")
}
}
f
f < 0.5
g <- runif(2)
g
if (g < 0.5) {
print("The random number is less than one half.")
}
g < 0.5
if (any(g < 0.5)) {
print("The random number is less than one half.")
}
if (all(g < 0.5)) {
print("The random number is less than one half.")
}
x <- 2:-1
x
sqrt(x)
?ifelse
y <- ifelse(x >= 0, sqrt(x), NA)
y
ifelse(is.na(y), 0, 1)
c > d
for (i in 1:3) {
print(factorial(i))
}
j <- 1
while (j < 4) {
print(factorial(j))
j <- j + 1
}
l <- c(2, 4, 7)
l <- c(2, 4, 7)
for (i in l) {
if (i == 4) {
out <- i
break
}
}
out
for (i in l) {
if (i == 4) {
next
}
print(i)
}
facorial(3)
factorial(3)
factorial(1:100)
factorial(1:100000)
for (i in 1:100000) {
factorial(i)
}
loop <- for (i in 1:100000) {
factorial(i)
}
vectorized <- factorial(1:100000)
identical(vectorized, loop)
vectorized <- factorial(1:100000)
loop
system.time(factorial(1:100000))
system.time(
for (i in 1:100000) {
factorial(i)
})
out <- 0
for (i in 1:20) {
if (i %% 2 == 0) {
out <- out + 1/i
}
}
out
seq(2, 20, by = 2)
out <- 0
for (i in seq(2, 20, by = 2)) {
out <- out + 1/i
}
out <- 1:20
out
sum(1/out[out%%2==0])
out[out %% 2 == 0]
out %% 2 == 0
mtcars
head(mtcars)
apply(mtcars, 2, mean)
x <- apply(mtcars, 2, mean)
x
apply(mtcars, 1, max)
?mean
out <- apply(mtcars, 2, mean, trim = 0.1)
out
colMeans(mtcars)
summary(mtcars)
summary(mtcars$gear)
summary(mtcars)
carlist <- as.list(mtcars[1:5], )
carlist <- as.list(mtcars[1:5,])
carlist <- as.list(mtcars[1:5,])
carlist
?lapply
lapply(carlist, mean)
lapply(carlist, mean, trim = 0.05)
carlist <- list(mazda = mtcars[1:2, ],
hornet = mtcars[4:5, ],
merc = mtcars[8:14, ])
carlist
lapply(carlist, colMeans)
lapply(carlist, function(x) apply(x, 2, mean))
lapply(carlist, function(x) apply(x, 2, mean))
sapply(carlist, function(x) apply(x, 2, mean))
class(sapply(carlist, function(x) apply(x, 2, mean)))
sapply(carlist, function(x) apply(x, 2, mean))
x <- list(runif(30, min = 0, max = 1),
runif(30, min = 1, max = 2),
runif(30, min = 2, max = 3),
runif(30, min = 3, max = 4))
x
lapply(x, mean)
sapply(x, mean)
quantile(1:100, probs = c(0.10, 0.90))
apply(mtcars, 2, quantile, probs = c(0.25, 0.5, 0.75))
apply(mtcars, 2, function(x) quantile(x, probs = c(0.25, 0.5, 0.75)))
calc_pv <- function(fv, r, n) {
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv
calc_pv(fv = 1000, r = 0.08, n = 10)
calc_pv(1000, 0.08, 10)
calc_pv <- function(fv, r, n) {
round(fv / ((1 + r)^n), 3)
}
calc_pv(fv = 1000, r = 0.08, n = 10)
calc_pv <- function(fv, r = 0.08, n) {
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv(fv = 1000, n = 10)
calc_pv(fv = 1000, r = 0.1, n = 10)
calc_pv <- function(fv, r, n) {
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv(fv = 1000, n = 10)
calc_pv <- function(fv, r, n, x) {
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv(fv = 1000, r = 0.08, n = 10)
arith <- function(x, y) {
x + y
x - y
x * y
x / y
}
arith(1, 2)
arith <- function(x, y) {
a <- x + y
b <- x - y
c <- x * y
d <- x / y
c(a, b, c, d)
}
arith(1, 2)
list(addition = a,
subtraction = b,
multiplication = c,
division = d)
arith <- function(x, y) {
a <- x + y
b <- x - y
c <- x * y
d <- x / y
list(addition = a,
subtraction = b,
multiplication = c,
division = d)
}
arith(1, 2)
x <- arith(1, 2)
x
arith <- function(x, y) {
a <- x + y
b <- x - y
c <- x * y
d <- x / y
list(addition = a,
subtraction = b,
multiplication = c,
division = d)
}
x <- arith(1, 2)
calc_pv <- function(fv, r, n) {
# Input validation
if (!is.numeric(fv) | !is.numeric(r)) {
stop("All the inputs must be numeric")
}
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv("1000", 0.08, 10)
calc_pv(NA, 0.08, n)
calc_pv(c(NA, 1000, 10000), 0.08, n)
calc_pv(c(NA, 1000, 10000), 0.08, n = 10)
?mean
calc_pv <- function(fv, r, n, na.rm = FALSE) {
# Input validation
if (!is.numeric(fv) | !is.numeric(r)) {
stop("All the inputs must be numeric")
}
if (na.rm == TRUE) {
fv <- fv[!is.na(fv)]
}
pv <- fv / ((1 + r)^n)
round(pv, 3)
}
calc_pv(c(NA, 1000, 10000), 0.08, n = 10)
calc_pv(c(NA, 1000, 10000), 0.08, n = 10, na.rm = TRUE)
# Title:          00_Run.R
# Purpose:
rm(list=ls())
# Libraries -----
#.libPaths(c(.libPaths(), "/home/alz18/R/x86_64-pc-linux-gnu-library/4.2"))
library(bit64)
library(doParallel)
library(fastLink)
library(foreign)
library(data.table)
library(dplyr)
library(gender)
library(fastLink)
citation("fastLink")
?anti_join
# Isolate individual-level variables
tmp_individual <- df[[i]] %>%
select(firstname, firstnameA, firstnameB, lastname, lastnameA, lastnameB,
ethnicityA, ethnicityB, ageA, ageB, genderA, genderB, personA, personB,
matchstep, headageA, headageB) %>%
mutate(ethagegen = paste(ethnicityA, ageA, genderA, ethnicityB, ageB, genderB, sep = ", "))
library(fastLink)
?fastLink
setwd("~/Desktop/dir/Assignments-Anna-Ziff/Data/CCD/")
list.files()
read_csv("CCD_Characteristics_2019.csv")
library(tidyverse)
a <- read_csv("CCD_Characteristics_2019.csv")
View(a
)
a <- read.csv("CCD_Characteristics_2019.csv")
a <- read_csv("CCD_Characteristics_2019.csv")
a <- read.csv("CCD_Characteristics_2019.csv", na.strings = c("", "NA"))
?replicate
